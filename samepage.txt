'use client'

import { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Label } from "@/components/ui/label"
import { motion } from "framer-motion"
import { CheckCircle2 } from 'lucide-react'

interface Question {
  id: number
  question: string
  options: string[]
  correctAnswer: number
}

const questions: Question[] = [
  {
    id: 1,
    question: "When trying to remember information, I am most likely to recall:",
    options: [
      "The picture or diagram I saw",
      "The experience or activity I was part of",
      "The explanation I heard"
    ],
    correctAnswer: 0
  },
  {
    id: 2,
    question: "If I were learning how to assemble something, I would prefer:",
    options: [
      "Seeing an illustrated guide or watching a demonstration",
      "Doing it myself step-by-step with guidance",
      "Hearing step-by-step verbal instructions"
    ],
    correctAnswer: 0
  },
  {
    id: 3,
    question: "To understand complex ideas best, I prefer:",
    options: [
      "Seeing charts, graphs, and visual examples",
      "Engaging in simulations or physical activities",
      "Listening to in-depth explanations or discussions"
    ],
    correctAnswer: 0
  },
  {
    id: 4,
    question: "When recalling a conversation, I am most likely to remember:",
    options: [
      "The expressions and body language I saw",
      "How it felt to be part of that conversation",
      "The specific words and tone that were used"
    ],
    correctAnswer: 0
  },
  {
    id: 5,
    question: "When I want to explain something complex to others, I usually:",
    options: [
      "Draw or show visual examples",
      "Demonstrate or have them practice it hands-on",
      "Talk them through it in detail, describing each part"
    ],
    correctAnswer: 0
  }
]

export default function PP1() {
  const [answers, setAnswers] = useState<(number | null)[]>(new Array(questions.length).fill(null))
  const [showResult, setShowResult] = useState(false)

  const handleAnswerSelect = (questionIndex: number, value: string) => {
    const newAnswers = [...answers]
    newAnswers[questionIndex] = parseInt(value)
    setAnswers(newAnswers)
  }

  const handleSubmit = () => {
    setShowResult(true)
  }

  const handleRetry = () => {
    setAnswers(new Array(questions.length).fill(null))
    setShowResult(false)
  }

  if (showResult) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-purple-50 to-blue-50">
        <motion.div
          initial={{ scale: 0.9, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.3 }}
        >
          <Card className="w-full max-w-2xl shadow-lg border-2 border-purple-100">
            <CardHeader className="bg-gradient-to-r from-purple-100 to-blue-100 rounded-t-lg">
              <CardTitle className="text-3xl text-center text-gray-800 font-bold">
                Learning Style Assessment Results
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6 p-8">
              <div className="flex items-center justify-center">
                <CheckCircle2 className="w-16 h-16 text-green-500 mr-4" />
                <div>
                  <p className="text-2xl font-semibold text-gray-800">
                    Assessment Complete!
                  </p>
                  <p className="text-gray-600 mt-2">
                    Your learning style preferences have been recorded
                  </p>
                </div>
              </div>
              <div className="flex justify-center mt-8">
                <Button 
                  onClick={handleRetry}
                  className="bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white px-8 py-2 rounded-full transition-all duration-200 transform hover:scale-105"
                >
                  Take Again
                </Button>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    )
  }

  return (
    <div className="min-h-screen p-4 bg-gradient-to-br from-purple-50 to-blue-50">
      <div className="max-w-3xl mx-auto space-y-6 py-8">
        <Card className="shadow-lg border-2 border-purple-100">
          <CardHeader className="bg-gradient-to-r from-purple-100 to-blue-100 rounded-t-lg">
            <CardTitle className="text-2xl text-gray-800 text-center">
              Learning Style Assessment
            </CardTitle>
          </CardHeader>
        </Card>

        {questions.map((question, questionIndex) => (
          <motion.div
            key={question.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3, delay: questionIndex * 0.1 }}
          >
            <Card className="shadow-lg border-2 border-purple-100">
              <CardHeader className="bg-gradient-to-r from-purple-100/50 to-blue-100/50">
                <div className="flex justify-between items-center">
                  <CardTitle className="text-xl text-gray-800">
                    Question {questionIndex + 1}
                  </CardTitle>
                </div>
              </CardHeader>
              <CardContent className="space-y-6 p-8">
                <div className="text-lg font-medium text-gray-800">
                  {question.question}
                </div>
                
                <RadioGroup
                  value={answers[questionIndex]?.toString()}
                  onValueChange={(value) => handleAnswerSelect(questionIndex, value)}
                  className="space-y-4"
                >
                  {question.options.map((option, index) => (
                    <div 
                      key={index} 
                      className="transform transition-all duration-200 hover:scale-[1.01]"
                    >
                      <label
                        className={`flex items-center space-x-3 p-4 rounded-lg border-2 cursor-pointer
                          ${answers[questionIndex] === index 
                            ? 'border-purple-500 bg-purple-50' 
                            : 'border-gray-200 hover:border-purple-200 hover:bg-gray-50'}`}
                      >
                        <RadioGroupItem
                          value={index.toString()}
                          id={`question-${questionIndex}-option-${index}`}
                          className="border-2"
                        />
                        <Label
                          htmlFor={`question-${questionIndex}-option-${index}`}
                          className="text-base cursor-pointer flex-grow"
                        >
                          {option}
                        </Label>
                      </label>
                    </div>
                  ))}
                </RadioGroup>
              </CardContent>
            </Card>
          </motion.div>
        ))}

        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5 }}
        >
          <div className="flex justify-end pt-6">
            <Button
              onClick={handleSubmit}
              disabled={answers.includes(null)}
              className="bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white px-8 py-2 rounded-full transition-all duration-200 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100"
            >
              Complete Assessment
            </Button>
          </div>
        </motion.div>
      </div>
    </div>
  )
}
